---
title: Getting Started Deploying Ruby on Rails Apps
owner: Buildpacks
---

<strong><%= modified_date %></strong>

This guide walks you through deploying a Ruby on Rails app to <%=vars.first_product_name%>.

## <a id='prerequisites'></a>Prerequisites

Before you deploy your app to <%=vars.product_name%>, ensure you have the following:

* A Ruby on Rails app that runs locally
* [Bundler](http://bundler.io) installed on your machine
* Your username and password for the targeted Cloud Foundry instance that have Space Developer [permissions](../../concepts/roles.html#roles)
* The [Cloud Foundry Command Line Interface (cf CLI)](../../cf-cli/install-go-cli.html)

If you want to follow this tutorial using a sample app and a managed PostgreSQL service, clone the `rails-sample` app from GitHub by running the following command:

<pre class='terminal'>
$ git clone https://github.com/cloudfoundry-samples/rails_sample_app
</pre>

##<a id='login'></a>Step 1: Log in to Cloud Foundry

To log in to your Cloud Foundry instance and target its API endpoint, do the following:

1. Run the `cf login -a API-URL` command, where `API-URL` is the API endpoint for the instance. <%=vars.api_endpoint_book%>

1. Enter your credentials to log in and to select a [Space and Org](../../concepts/roles.html).

## <a id="service-instance"></a> Step 2: (Optional) Create Service Instances

An app that uses services, such as a database, messaging, or email server, is not fully functional until you provision the services and, if required, bind the services to the app. <%=vars.dev_console_1%>

<p class="note"><strong>Note</strong>: If you use the sample Ruby on Rails app to go through this tutorial, Step 2 is not optional.</p>

You can provision service instances for an app that has already been pushed to Cloud Foundry. For more information about creating and using service instances, refer to the [Services Overview](./../../devguide/services/index.html) topic.

### Create a Service Instance

To create a service instance:

1. Confirm service availability in the Marketplace:

    <pre class="terminal">$ cf marketplace</pre>

2. Run the `cf create-service SERVICE-NAME PLAN-NAME SERVICE-INSTANCE-NAME` command. See the following example for the sample Ruby on Rails app:

	<pre class="terminal">
	$ cf create-service elephantsql turtle rails-postgres
	Creating service rails-postgres in org my-org / space development as user<span>@</span>example.com....
	OK</pre>

    In the command above, `elephantsql` is the name of the service, `turtle` is the name of the service plan, and `rails-postgres` is the unique name you gave your service instance.

### Bind a Service Instance

When you bind a service instance to an app, Cloud Foundry writes information about the service instance to the [VCAP_SERVICES](../../devguide/deploy-apps/environment-variable.html) environment variable. The app can use this information to integrate with the service instance.

Most services support bindable service instances. Refer to your service provider's documentation to confirm whether they support this functionality. To bind a service instance to your app, you can do one of the following:

* Specify your service instance in the `services` sub-block of the app manifest file, which enables Cloud Foundry to bind the service instance to the app during deployment. See the following excerpt from the manifest file of the sample Ruby on Rails app:

	```
	  services:
	    - rails-postgres
	```

* Bind a service instance after pushing your app to Cloud Foundry:

	<pre class="terminal">
	$ cf bind-service APP-NAME SERVICE-INSTANCE-NAME
	</pre>

    <p class='note'><strong>Note:</strong> You must restart or in some cases re-push your app for changes to be applied to the <code>VCAP_SERVICES</code>environment variable and for the app to recognize these changes.</p>

## <a id="deployment-options"></a> Step 3: Define Deployment Options

You can define deployment options on the command line, in a manifest file, or both together.

### (Optional) Configure the Deployment Manifest

You can specify app deployment options in a manifest that the `cf push` command uses. See the manifest file for the sample Ruby on Rails app:

```
---
applications:
- name: rails-sample
  memory: 256M
  instances: 1
  path: .
  command: bundle exec rake db:migrate && bundle exec rails s -p $PORT
  services:
    - rails-postgres
```

For more information about app manifests and supported attributes, refer to the [Deploying with Application Manifests](./../../devguide/deploy-apps/manifest.html) topic.

### (Optional) Configure a Production Server ###

For Ruby and Ruby on Rails apps, <%=vars.product_name%> uses WEBrick, the default web server for the Ruby standard library. However, <%=vars.product_name%> can support a more robust production web server, such as Phusion Passenger, Puma, Thin, or Unicorn. If your app requires a more robust web server, refer to the [Configuring a Production Server](../prod-server.html) topic for help configuring a server other than WEBrick.

## <a id="deploy"></a> Step 4: Deploy a Ruby on Rails App

To deploy your app, run `cf push APP-NAME` from the root directory of the app.

The `cf push APP-NAME` command creates a URL route to your app in the `HOST.DOMAIN` format, where `HOST` is your `APP-NAME` and `DOMAIN` is specified by your administrator. For example, for the `<%=vars.app_domain%>` domain, running `cf push APP-NAME` creates the `APP-NAME.<%=vars.app_domain%>` URL.

If the URL for your app is not unique, the deployment fails. For more information about creating unique URLs, see the [Configure Domains](../../devguide/deploy-apps/deploy-app.html#domain) section of the *Deploy an Application* topic.

See the following example for a sample Ruby on Rails app:

<pre class="terminal">
$ cf push rails-sample
Using manifest file ~/workspace/rails_sample_app/manifest.yml

Updating app rails-sample in org Cloud-Apps / space development as clouduser@example.com...
OK

Using route rails-sample.<%=vars.app_domain%>
Uploading rails-sample...
Uploading app files from: ~/workspace/rails_sample_app
Uploading 445.7K, 217 files
OK
Binding service rails-postgres to app rails-sample in org Cloud-Apps / space development as clouduser@example.com...
OK

Starting app rails-sample in org Cloud-Apps / space development as clouduser@example.com...
OK

...

0 of 1 instances running, 1 starting
1 of 1 instances running

App started

Showing health and status for app rails-sample in org Cloud-Apps / space development as clouduser@example.com...
OK

requested state: started
instances: 1/1
usage: 256M x 1 instances
urls: rails-sample.<%=vars.app_domain%>

     state     since                    cpu    memory          disk
#0   running   2014-08-25 03:32:10 PM   0.0%   68.4M of 256M   73.4M of 1G
</pre>

The example above shows that the `cf push` command uses the instructions in the manifest file to create the app, create and bind the route, and upload the app. It then binds the app to the `rails-postgres` service and starts one instance of the app with 256 MB of RAM. After the app starts, the output displays the health and status of the app.

<p class='note'><strong>Note</strong>: If you want to view log activity while the app is deployed, launch a new terminal window and run <code>cf logs APP-NAME</code>.

You can verify that your app is running by browsing to the URL generated in the output of the `cf push` command. 


## <a id="database-configuration"></a> Step 5: (Optional) Configure Service Connections

For Ruby on Rails versions 4.0.0 and earlier, the Ruby buildpack overwrites the `config/database.yml` file using the contents of the `DATABASE_URL` environment variable. This variable can be set by the user, or it will be automatically set based on [bound service instances](./ruby-service-bindings.html#vcap-services-defines-database-url).

For Ruby on Rails versions 4.1.0 and later, the Ruby buildpack does not modify the `config/database.yml` file.

When the app starts, the [standard Ruby on Rails behavior](http://guides.rubyonrails.org/configuring.html#configuring-a-database) for `DATABASE_URL` and `config/database.yml` applies.

##<a id="next"></a>What to Do Next

You have deployed an app to <%=vars.product_name%>. Consult the sections below for information about what to do next.

### Test a Deployed App

Use the cf <%=vars.dev_console_2%> to review information and administer your app and your <%=vars.product_name%> account. For example, you could edit the `manifest.yml` file to increase the number of app instances from 1 to 3 or redeploy the app with a new app name.

### Manage Your App with the cf CLI

Run `cf help` to view a complete list of commands and run `cf help COMMAND` for detailed information about a specific command. For more information about using the cf CLI, refer to the cf CLI topics, especially the <%=vars.cli_v6%> topic.

### Troubleshooting

If your app fails to start, verify that the app starts in your local environment. Refer to the [Troubleshooting Application Deployment and Health](./../../devguide/deploy-apps/troubleshoot-app-health.html) topic to learn more about troubleshooting.
